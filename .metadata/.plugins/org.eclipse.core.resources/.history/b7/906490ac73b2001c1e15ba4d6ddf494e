package Heap;

public class Heap<T extends Comparable<T>> {
	Comparable<T> data[] = null;
	int N = 0;

	public Heap(int x) {
		data = new Comparable[x];
	}

	public int size() {
		return N;
	}

	public void exchange(int i, int j) {
		Comparable<T> temp;
		temp = data[i];
		data[i] = data[j];
		data[j] = temp;
	}

	public boolean less(Comparable<T> w, Comparable<T> v) {
		return w.compareTo((T) v) < 0;
	}

	public void add(Comparable<T> d) {
		data[++N] = d;
		if (N > 1)
			swim();
	}

	public void swim() {
		int k = N;
		while (k > 1) {
			if (less(data[k / 2], data[k])) {
				exchange(k / 2, k);
			}
			else
				break;
			k=k/2;
		}
	}
	
	public void delete(Comparable<T> d) {
		for(int i=1;i<=N;i++) {
			if(data[i]==d) {
				exchange(i, N);
				sink(i);
				break;
			}
		}
	}

	public void sink(int i) {
		
	}
}
